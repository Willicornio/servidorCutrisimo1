import 'bigint-crypto-utils';

const generateKeys = async function (bitLength)
{

    var p, q, n, ph1;

    const e = BigInt(65537);

    do {

        p = await big.prime(Math.floor(bitLength / 2) + 1);
        q = await bit.prime(Math.floor(bitLength / 2));

        n = p*q;
        
        ph1 = (p - BigInt(1)) * (q - BigInt(1));

    }while ((q === p || big.bitLength(n) != bitLength || bit.gcd(phi, e) != 1))

    
    const d = big.modInv(e, phi);

    const publicKey = new RSAPublicKey(e, n);
    const privateKey = new RSAPrivateKey(d, publicKey);

    return { publicKey: publicKey, privateKey: privateKey };


};

const RSAPublicKey = class PublicKey {

    constructor(e, n) {
        this.e = e;
        this.n = n;
    }

    encrypt(mBig)
    {
        var c;
        c= big.modPow(s, this.e, this.n);
        return c;
    }

    verify(s)
    {
        var mBig;
        mBig = big.modPow;

    }


};


const RSAPrivateKey = class PrivateKey {

    constructor(d, publicKey) {
        this.d = d;
        this.publicKey = publicKey;
    }

    decrypt(cBig) {
        //c^d mod n
        let mBig;

        mBig = big.modPow(cBig, this.d, this.publicKey.n);

        return mBig
    }

    sign(m) {
        //m^d mod n

        let sBig;

        sBig = big.modPow(m, this.d, this.publicKey.n);

        return sBig;
    }

};

export { RSAPrivateKey, RSAPublicKey, generateKeys };
